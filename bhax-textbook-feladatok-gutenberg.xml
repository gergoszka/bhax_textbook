<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>         
            <citation>PICI</citation>       
        </para>
        <para>
            2.4 Adattípusok
        </para>
         <para>
            Az adattípusok a programozási nyelvek egy absztrakt eszköze, ami mindig valmilyen másik feladatunk részeként jelenik meg. Három tulajdonság jellemzi őket: tartományuk, műveleteik és reprezentációjuk.
             A tartománya az spectrum melyen belül az adattípus elemi felvehetnek értéket. Azok a műveletek tartoznak hozzá, melyeket az elemein eltudunk végezni. Reprezentációja pedig az egyes elemek tárolásat mutatja meg bitekben(pl: C-ben egy chart egy bájton reprezentálunk).
             Minden típusos nyelvben vannak beépített típusok, néhányban pedig magunk is deklarálhatjuk őket a három tulajdonságuk megadásával. Ezen felül úgy is letrehozhatunk saját típust hogy egy már meglévő tartoményát csökkentjük.
             Az adattípusok két nagy csoportja az egyszerű és az összetett típusok. Az egyszerű közé tartoznak az egész,valós,karakters és a logikai típus míg az összetetthez tömb és a rekord. 
             Ezenfelül vannak speciális típusok, például a mutató aminek adatrészében egy másik elem memóriacíme van, alapvető feladata a tárhelyen lévő adat elérése.
        </para>
         <para>
            2.5 Nevesített konstans
        </para>
         <para>
            A nevesített konstansnak van neve, típusa és értéke. Mindig deklarálni kell és egy olyan értéket jelöl beszédesebb nevekkel amelyek a programunk alatt nem változtatnak értéket.
            Ezen felül ha meg kell változtatni az értéket, akkor elég egy helyen és nem minden előfordulásában átírni. 
        </para>
         <para>
            2.6 Változó
        </para>
        <para>
            A változó egy olyan programozási eszköz melynek neve, attribútumai,címe és értéke van. A nevével jelöljük programkódunkban, attribútumokat deklarációkor kap(pl típus), címe a memóriában elfoglalt helye, értéke pedig ezen a helyen lévő információ.
            
        </para>
          <para>
          4. Utasítások
        </para>
        <para>
            Az utasítások segítségével írjuk le az algoritmusunk feladatát lépésenként. Egy részük csak a fordítóprogramnak szólnak, ezek a deklarációs utasjtésok, melyek valamilyen szolgáltatást kérnek vagy információt szolgáltatni a fordítónak.
            Másik részük pedig a végrehajtó utasítások, melyekből majd a programkód épül fel. Csoportosításuk:
        </para>
        <itemizedlist>
            <listitem>
                <para>1. Értékadó utasítás: Ezzel adunk a változóinknak értékét.</para>                        
            </listitem>
             <listitem>
                <para>2. Üres utasítás: Mint nevében is szerepel az ilyen utasítások törzse üres. Ilyenkor a processzor egy üres gépi utasítást csinál. </para>                        
            </listitem>
             <listitem>
                <para>3. Ugró utasítás: A program jelenlegi pontjáról egy másik meghatározott pontra dobjuk a vezérlést. </para>                        
            </listitem>
             <listitem>
                <para>4. Elágaztató utasítások: Van kétirányú elágazó utasítás (if else) mely egy feltétel alapján két lehetséges tevékenység között választ. Ennek az összetettebb változata a többirányú elágazó utasítás(switch)
                         ami egy feltétel alapján több lehetséges esetet próbál ráilelsteni, ha sikerül azt hajtja végre, ha nem akkor van egy default válasz hajtódik végre. 
                </para>                        
            </listitem>
             <listitem>
                <para>5. Ciklusszervező utasítások: Lehetővé teszik , hogy a program valahány utasítását bármennyiszer megismételjük. Maga a ciklus magjában található a kód, ami megismétlésre kerül majd.
                        Fontos része a ciklusoknak az ismétlődésre vonatkozó információ, ami lehet: egy feltétel igaz/hamis állapota, ezt a ciklus minden iteráció után(do..while)vagy előtt(while) ellenőrzi; lehet előírt lépésszámú ciklus is amely egy előre megadott értékszer hajtja végre a magját(for ciklus).
                </para>                        
            </listitem>
             <listitem>
                <para>6. Hívó utasítás:  </para>                        
            </listitem>
             <listitem>
                <para>7. Vezérlésátadó utasítások: CONTINUE:Megnézi a ciklus ismétlődés feltételeit és vagy újrakezdi a cilust vagy befejezi azt; BREAK: A ciklust szabályosan befelyezi és kilép belőle; 
                         RETURN(érték): Befejezi a függvényt és visszadja az értéket a hívónak.
                </para>                        
            </listitem>
             <listitem>
                <para>8. I/O utasítások </para>                        
            </listitem>
             <listitem>
                <para>9. Egyéb utasítások </para>                        
            </listitem>
           
        </itemizedlist>         
          <para>
            5.1 Alprogramok
        </para>
        <para>
            Egy programnyelveknél mindig kérdés, hogy hogyan lehet azt feldarabolni ls a tagokat hogyan kell fordítani. Lehetséges minden önálló részt külön, az egész programot egyben és ennek kombinációjat is használni.
            Az eljárásorientált nyelvekben a programegységek között megkülönböztetünk alprogramot, blockot,csomagot és taszkot. Az alprogramok olyan kódrészletek, melyeket csak egyszer kell megírni, azután az egész programon belül megívhatjuk amikor szügségünk van rá.
            Egy alprogramot függvénynek nevezünk ha van visszetérési értéke, egyébként egy eljárásról beszélünk. Egy alprogram fejében megadhatunk argumentumokat, ezeket a megívásakor ki kell töltenünk a megfelelő típusú adatokkkal, ez akkor hasznos ha valamilyen olyan adatot akarunk neki átadni ami a scope-ján kívül van.
          </para>
          <para>
            5.2 Hívási lánc, rekurzió  
          </para>
          <para>
            Minden programegység hivatkozhat másik programegységekre, ennek a folyamatát hívási láncnak nevezzük. A hívási láncot mindig a főprogram kezdi és szabályos esetben mindig az akívval kezdve zárul be
            Ha az alprogram egy akív alprogramot hív meg azt rekurziónak nevezzük. Ez lehet közvetlen, amikor az aktív alprogram saját magát hívja meg és közvetett, amikor egy másik programot hívunk meg a hívási láncból.
          </para>
          <para>
            5.3 Másodlagos belépési pontok
          </para>
          <para>
              Egy alprogramra nem csak a fejen keresztül tudunk hivatkozni. Egyes programnyelvek megengedik, hogy a program törzsében létrehozzunk egy másodlagos belépási pontot. így ha ezen kerezstül érjük el az alprogramot csak a belépési pont utáni kód fut le a törzsben.
          </para>
           <para>
            5.4 - 5.5 Paraméterek 
          </para>
           <para>
              Amikor egy alprogram meghívásánál az aktuális a paraméterek a formális paraméterekhez rendelődnek paraméterkiértékelésnek nevezzük. Egy programon belül a formális lista mindig állandó, egy darab van belőle, míg az aktuális paraméterek meghívásonként változhatnak.
              Ezeket az értékeket sok féleképpen lehet egymáshoz rendelni, leggyakoribb az érték és a referencia szerinti paraméterátadás. Érték szerinti paraméterátadásnál a megkapott változók eredeti értékei nem változnak, csak az alprogramon belül, 
              míg referencia szerinti átadásnál mutatókat alkalmazunk a megkapott változó címére , így azt változtatjuk és nem egy másolt értéket.   
          </para>
           <para>
            5.6 Blokk
          </para>
          <para>
              Egy blokkot különleges karakterekkel ({},begin..end) kezdődő és végződő programegység. Egy blockba belépni és kilépni legegyszerűbben úgy lehet hogy a vezérlés rá kerül, de alkalmazhatunk GOTO utasítáást is erre a célra.  . 
              Fő szerepe a program átláthatóvá tétele és a hatáskörük eltárolása.
          </para>
           <para>
            5.7 Hatáskör
          </para>
          <para>
            A hatáskörök olyan területek a programon belül, ahol egy adott név mindig ugyanazt az értéket hivatkozza. Egy programegységben deklarált nevet lokális névnek nevezünk, az e feletti hatáskörökben deklarált neveket pedig globális neveknek.
            A nevek láthatósága kívülről befelé működik, vagyis a főprogram változóit mindenki látja , míg egy eljárásét csak ő. A hatáskörök lehetővé teszik hogy egy változót például kétszer deklaráljunk két különböző alprogramban amik nem látják egymást, így nem akadnak össze az értékeik, bár ez is sem javasolt programozói szokás. 
          </para>
    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para>   
        <para>
            3.1 Utasítások és blockok
        </para>     
          <para>
           C-ben egy egy kifejezés akkor tekinthető utasítésnak ha pontosvessző zárja, egyszerű elv mégis sok kezdő programozó fordítási hibáinak forrása. 
           Egy blockot kapcsos zárójelek között hozhatunk létre, ezeknek majd a hatásköröknél lesz jelentőségük.
        </para>
        <para>
            3.2 If-else utasítás
        </para>     
        <para>
            Az if-else szerkezet egy két végkimenettel rendelkező döntést hozó utasítás. A szintaxisa szerint az if utén következik egy feltétel, ami ha igaz az if utáni block hajtódik végre,
            ha pedig hamis az else ág utáni. Az else ág nem mindig szügséges, ilyenkor a feltétel hamis léte esetén nem történik semmi. Az ifeket lehet egymásba fűzni, ezt úgy érjük el, hogy 
            az else után egy if-et írunk, amit egy újabb kifejezésnek kell követnie. Ilyenkor a legultolsó else akkor fut le ha semelyik feltétel sem teljesült.
        </para>
        <para>
            3.4 Switch
        </para>     
        <para>
            A switchet leginkább egy if-else ághoz lehetne hasonlítani azzal a különbséggel, hogy itt a kifejezést nem csak igaz-hamis állapotok szerint mérjük, hanem lehetőség van
            több lehetséges eredmény esetén különböző válaszokat adnunk. A különböző eseteket a case kulcsszó után kell írnunk, ebből bátmennyi lehet de mindegyiknek egy break-kel kell záródnia.
            Ezen felül szügség van egy default válaszra, ami akkor aktiválódik ha egyik case-re sem illeszkedik a kifejezésünk. 
        </para>
        <para>
            3.5 While és for utasítás
        </para>
        <para>
            A while után meg kell adni egy kifejezést zárójelekben. Ha ez az érték nem nulla akkor elkezdi a cilkust, ha végzett vele újra ellenőrzi a kifejezés értéket, ezt teszi egészen addig amíg az érték nulla nem lesz.
            A for egy előre meghatározott lépésszámú ciklus, utána három argumentumra van szügsége a működéshez. Az első a kezdő értek,ahonnan kezdjük a számlálást, a második egy kifejezés vagy érték amit el kell érnie a kezdőértéknek hogy befejeződhessen a ciklus,
            harmadik pedig maga a lépésköz megadása amivel növeljük a kezdőértéket minden iterációban. 
            Mind a kettőből kiléphetünk a 3.7-ben tárgyalt utasításokkal vagy az is megeshet hogy -direkt vagy véletlen- végtelen ciklust hoztunk létre és soha nem lépünk ki belőle. 
        </para>
        <para>
            3.6 Do while utasítás
        </para>
        <para>
            Mind a for, mind a while a ciklus elején vizsgálja a kilépési feltétel teljesülését, ezt a do-while a ciklustörzs végrehajtása után teszi meg. így látható hogy a ciklus minimum egyszer biztosan le fog futni.
        </para>
        <para>
            3.7 Break, continue, goto utasítások
        </para>
            <para>
                A BREAK utasítással megszakítjuk az adott blokk folyamatát és azonnal kilépünk belőle, folytatva az adott block után mintha szabályosan végbement volna.        
             </para> 
             <para>
                A CONTINUE hasonló mint a break bár kevesebbet használjuk. Ezt is egy ciklus törzsébe rakjuk és ha rákerül a vezérlés az adott ciklus újra ellenőrzi kilépési feltételét 
                és annak értéke szerint vagy új iterációt kezd vagy kilép a ciklusból.
             </para>
             <para>
                A GOTO-val egy megadott círe tudunk ugrani, használata nem ajánlott, de lehet haszna mélyen egymásba ágyazott ciklusokból való kilépés esetén. 
             </para>

    </section>        
    <section>
        <title>Programozás</title>
        <para>
              2.1.1 Függvényparaméterek és visszatérési érték
        </para>
        <para>
            Ha C-ben megadunk egy függvényt paramáterek nélkül az bármennyi paramáterrel hívható, míg C++-ban azt jelenti, hogy nincs paramétere. 
            Sőt ha vissaztérési értéket nem adunk meg a C automatikusan intet fog visszaadni, a C++ pedig hibát mivel nincs alapértelmezett visszatérési értéke.
        </para>
        <para>
             2.1.2 Main függvény
        </para>
         <para>
            Az main függyvény argumentumaként dekralálható argc a parancssorba beérkező argumentumok számát, míg az argv a paracssori argumentumokat adja meg. 
             C++ nem muszáj returnt írni a main végére.
        </para>
        <para>
             2.2 Függvények túlterhelése
        </para>
         <para>
            Két függvényleg lehet ugyanaz a neve amíg argumentumlistájuk különbözik. a C++ a függvény nevet az argumentumokkal együtt tárolja, így a különböző változatoknak nem kell egyesével nevet adni.
        </para>
        <para>
             2.3 Alapértelmezett függvényargumentumok
        </para>
         <para>
            C++ nelvben lehetőség van a függvények argumentumainak alapértéket megadni.             
            Ekkor ha a függvény hívásakot nem adjuk meg paramáterként akkor az alapértelmezett értéket használja.
        </para>
        <para>
            2.4 Paramáteradás referenciatípussal
        </para>
         <para>
            Ha azt szeretnénk C-ben, hogy egy függvény megváltoztassa az argumentum változó értékét pointerekkel kell hivatkoznunk rá, íg meg tudja változtatni az értékét. 
             C++ban ezt referenciatípus bevezetésével hidalják át. A C teljes pointerré alakítás helyett elég egy  jelet írni a függvény deklarációjában a változónév elé.
        </para>
        
        
        <para>
            3. fejezet
        </para>
        <para>
            C-ben és assemlyben viszonylag egyszerű gyorsan futó kódot írni. Ez a egyszerűség viszont egy bonyolultabb programoknál problémákat okozhat mivel egy szint után rendezetlen, átláthatatlan lesz a kódunk.
            Erre a problémára az 1990es években dolgoztak ki egy paradigmát : az objektum orientált nyelveket. Az OO nyelvekben az egy entitáshoz tartozó tulajdonságokat, függvényeket és változókat egy oszályhoz rendeljük,
            ezt a folyamatot egységbe zárásnak (encapsulation) nevezük.
            Az osztályoknak vannak olyan részei melyeket a program más része nem lát (data hiding), ez egyrész hasznos a kód egyszerűsítésében, másrészt az osztályon kívül lévő folyamatok így nem tudnak belenyúlni és így összekuszálni azt.
            Ezeket az osztályokat hogy használni tudjuk példányosítanunk kell. Ez azt jelenti hogy az általános entitást (auto) egy speciális egyedé tesszük (Ford focus 2004), így létrejön egy objectumunk. 
            Az így létrejött objectum örökli az elődje tulajdonságait, de azoknak új értéket adhatunk, sőt növelhetjük tulajdonságainak listáját.  
        </para>
        <para>
            Egy struktúra adattagjait itt tagváltózóknak, függvényeit pedig metódusoknak nevezzük. Ahányszor egy tagváltózót hozunk létre az külön memóriaterületet foglal nekik, ez a metódusokra viszont nem igaz.
            C++ ban is a . ls -> operátorokkal tudunk hivatkozni az adattagokra, de vigyáznunk kell viszont ,hogy ezek nem mindig egymás után tárolódnak a memóriáben így ezt az előnyt már nem használhatjuk ki.
            A C++ függvények első argumentuma mindig egy "láthatatlan" pointer. Ez a mutató mindig a példányosított függvényre mutat és az oszályon belül a this kulcsszóval tudjuk elérni.
            Egy osztályban három rész van adatrejtés szempontjából: public, private, protected. A public részben deklarált függvényeket és változókat mindki eléri, míg a privateben lévőket csak az osztályon belüli függyvények használhatjuk.
            A protected sokban hasonlít a private-ra azzzal a különbséggel, hogy az osztály gyerekei is láthatják. 
        </para>
        <para>
            
        </para>
        <para>
            
        </para>
    </section>        
</chapter>                

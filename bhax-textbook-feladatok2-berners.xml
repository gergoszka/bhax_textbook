<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berners-Lee!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    
    <section>  
        <title> Python </title>
        <para>
          A Python egy 1190-ben kifejlesztett programozási nyelv, ami népszerűségét könnyű tanulhatóságának és a más nyelvekkel való kompatibilitásának köszönheti.
            Lényegében egy szkriptnyelv, de rengeteg rengeteg csomagot tartalmaz így általában bonyolultabb feladatok prototípusainak elkészítésére használják.
            Ezt elősegíti, hogy a C++-al vagy a Java-val ellentétben nincs szügség külön fordításra és futtatásra, a python értelmazőnek elég a forrás és azt automatikusan fordítja és futtatja is.
            Rengeteg platformon elérhető és a magas színtű adattípusok miatt már akár tekinthető magas színtű programozási nyelvnek.
            A python egyik leginkább szenbetűnő jellemzője, hohy szintexisa behúzásalapú. Nincs szügség kapcsos zárójelekre, egy metódus törzsét egy tabulátor vagy néhány szóközös behúzás jelzi.
            Sőt a kifejezések végén sincs szügség pontosvesszóre, az interpreter a sor végét veszi záró karakternek.
        </para>
        <para>    
        A pythonban minden adatot objektumok ábrázolnak. A változók deklarációjakor nincs szügség annak típusának megadásásra, azt automatikusan futási időben adja meg a hozzárendelt érték alapján.
            A python a következő típusokat ismeri: számok, sztringek, ennesek, listák, szótárak. A változók alatt objektumokra mutató referenciákat értünk.
            Egy objektumra több változó is mutathat, viszont ha minden referencia törlődik róla, akkor a garbage collector szabaítja fel az objektum memóriaterületét.
            A változók lehetnek lokálisak és globálisak is. Egy függvényen belül felvett változó alapvetően lokális, ha globálissi szeretnénk tenni a 'global' kulcszóval kell deklarálni a függvény elején.
        </para>
        <para> 
            A számok közötti konverzió támogatott, sőt sztringekből is képezhetünk számokat. A karakteres szekvenciáknak (szting, lista, ennes) meg tudjuk mondani a hosszát, első és utolsó elemét és a konkatenáció is értelmezett rajtuk.
            A szekvenciák elemeit indexekkel érhetjük el. Az indexelés nullánál kezdődik, a negatív index azt jelentése, hogy hátulról visszafelé nézzük. Intervallumot is megadhatunk : karakterek között, 
            ekkor az indexek közötti karaktereket kapjuk. A python alap kiírató methódusa a print. Ez után veszzővel elválasztva soralhatjuk fel a sztringeket vagy más tetszőleges változókat.
        </para>
    </section>      
    <section>
        <title> C++ és Java összehasonlítása </title>
        <para>1.Hét: Az objektumorientált paradigma alapfoglamai. Osztály, objektum, példányosítás.</para>
        <para>
            A C++ és a Java is objektum orientált programozási nyelv, így követik az ezzel járó szemléletmód általánós tulajdonságait. Mindkét nyelvben a programozási hozzáállás alapegységei az osztályok.
            Az osztályok valós dolgok általános jellemzőit írják le. Ez a valami lehet egy fizikai dolog: autó, labda vagy bútor, és lehet valami megfoghatatlen pl: bankszámla.
            De egy osztály ezen entitásoknak csak egy tervrajza, még nem létezik az adott dolog csak megterveztük. Ahhoz, hogy létre is jöjjön példányosítani kell az osztályunkat, így egy objektumunk lesz amivel már lehet interaktálni.
           
            Mindkét nyelven hasonló módon fej és törzs részből épülnek fel az osztályok. A fej részt a class szó vezeti be majd az osztály neve követi, utána pedig egy zárójel jön, benne esetleges argumentumokkkal.
            Az osztály törzse a kapcsos zárójelek között lévő terület, az itt deklarált változók és metódusok az osztály tagjváltozói és tagfüggvényei.
            Egy osztály példányosításakor ezeknek a tagváltozóknak foglalunk helyet a memóriában minden egyes új objektum létrejöttekor(a tagfügvényekkel ez nem így van, azok mindig csak egy példányban vannak jelen).
            Mindkét nyelvben megadhatunk láthatósági kulcsszavakat az osztály deklarációja előtt. A public kulcsszóval nyilvánossá teszzük az osztályunkat, így más osztályok is hozzáférhetnek a benne lévő változókhoz és függvényekhez.
            Ez akkor lehet káros ha másokkal dolgozunk egy projekten és az ő osztályaik véletlen vagy direkt is belekavarhatnak a miénkbe. Ennek kivédésére használhatunk privát előtagot.
            Ekkor a változókat és metódusokat csak az adott osztály használhatja. A kettő közötti félnyilvános osztélyokat protectednek hívjuk, őket a szülő osztályból is el lehet érni.
       
            Talán a legnagyobb különbség a két nyelv között, hogy míg Javaban muszáj egy osztálynak léteznie aminek neve azonos a fájl nevével, C++ban ilyenre nincs szügség, akár osztályok
            nélkül is írhatunk működő kódot, bár ez elveszi az egész OOP lényegét.
        </para>
        
        <para>
            2.Hét: Öröklődés, osztályhierarchia. Polimorfizmus, metódustúlterhelés. Hatáskörkezelés. A bezárási eszközrendszer, 
            láthatósági szintek. Absztrakt osztályok és interfészek.
        </para>
        <para>
            
            Az adatabsztrakció (elvonatkoztatás) szerint le kell egyszerűsíteni a valóságból átemelt objektumainkat, és csak azokkal az információval dolgozzunk 
            amik relevánsak számunkra. Például egy program megírásáhot nem szügséges tudnunk minden függvény működését csak azt, hogy milyen adatokat vár el és 
            mit ad vissza. Erre példa a metódusok és osztályok láthatósága.
        </para>
        <para> 
            Az objektum orientált programozás lényeges paradigmája az adatabsztrakció mellett az öröklődés és a hozzá kapcsolódó polimorfizmus.
            Ennek rendje és módja szerint mind a két nyelvben megtalálható, nagyon kis eltérésekkel. Javaban a származtatandó osztály neve után írt
            extends kulcsszóval jelezzük, hogy melyik osztályt szeretnénk bővíteni, ez C++ ban egy kettősponttal történik. A bővített osztályt gyereknek,
            öszzességüket leszármazottaknak; az eredeti osztályt szülőnek, összeségüket pedig ősöknek nevezzük. Ha egy osztály származtatunk az eléri az ősei
            minden public és protected tagját, a privát adatok is inicializálódnak, őket viszint csak olyan metódusokon keresztül érjük el amik public vagy protected 
            láthatóságúak.Az öröklődés egy is-a kapcsolat. Mindkét nyelv támogatja az egyszeres öröklést, ami szerint egy osztálynak legfeljebb egy őse és bármennyi leszármazottja lehet.
            Viszont a C++ engedi a többszörös öröklést is, amiben egy osztály több alaposztályból származtatunk. Ennek értelmezése és kezelése nehéz, ezért főleg az 
            egyszeres öröklést alkalmazzuk, ami egy átlátható fa hierarhiát hoz létre.
        </para>
        <para>
            A gyerek osztály minden látható változóval és metódussal bír mint a szülője, viszont azért bővítettük az osztályt mert ezeket változtatni vagy 
            specifikálni szeretnénk. Szóval azt, hogy egy változó nem csak a deklarált, hanem a származtatott osztályokra is hivatkozhat polimorfizmusnak nevezzük.
            Felüldefiniálásnak nevezzük, amikor egy metódust az osztály örökölni egy definiciót az ősétől de ad rá saját definiciót. Osztálydefiniciók sose lehetnek
            felüldefiniálva. C++ban csak akkor lehet felüldefiniálni, ha az el van látva a virtual kulcsszóval, Javaban az nem problémi mivel ott minden metódus virtuális. 
        </para>
        <para>
            Az interfészek olyan osztályokon kívül értelmezett referenciák, amik már C-ben is léteztek protokol néven. Itt nincsenek meg sem a változók 
            sem metódusok implementációi, csak a deklarációjuk. Az interfész egy olyan felület a Javaban, ahol el lehet vonatkoztatni az implementációtól és a tesztelésre koncentrálni.
            Az interfészeknél is jelen van az öröklődés és kiterjesztésnek nevezzük. Visztont különbség az osztályok öröklődésétől, hogy lehet több ősinterfésze egy interfésznek és 
            nincsen ősinterfész amiből az összes származik.
        </para>
    </section>                                         

</chapter>                
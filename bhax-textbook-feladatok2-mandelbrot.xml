<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Az UML osztálydiagram a programunk osztályainak és azok kapcsolatainak összefoglaló diagramja. Általában a tervezési fázisban
            használjuk a projekt jobb átláthatósága miatt, de kész kódból is generálhatunk diagramot. Az ábrázolásmód alapja az osztályt
            jelölődoboz. Ez 3 részre van osztva felülről lefelé: felülre írjuk az osztály nevét, középre az osztályhoz tartozó attribútumokat
            a típusával együtt. A legalsó részbe kerülnek az osztály metódusai. A változók és metódusok láthatóságát is jelölni szoktuk
            a következő szimbólumokkal: + public, # protected, ~ csomagszintű, - private.
        </para>
        <para>
            A visual paradigm programmal a z3a7.cpp védési programból legeneráltunk egy UML osztálydiagrammot. Ehhez a tools menüből
            kell kiválasztani a Reverse from C++ opciót és megadni a fájlt tartalmazó mappát. A program ezután legenerálja és meg is jeleníti
            a Binfa modelljét: 
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Binfa_UML.png" scale="190"  />
                </imageobject>
        </mediaobject>
        <para>
            Az UML-ek nagyon fontos része az osztályok között lévő kapcsolatok ábrázolása. Ezek az alapvető kapcsolatok az asszociáció, aggregáció, kompozíció
            és öröklődés. A modelleken ezeket egy sima vagy szaggatott vonallal és különböző fejű nyilakkal ábrázoljuk.
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/UML_kapcs.png" scale="150"  />
                </imageobject>
        </mediaobject>
        <para>
            Asszociáció:
        </para>
        <para>
            Két független osztály közötti összeköttetést jelent. A végére lehet nyilat írni, ez azt jelenti, hogy a másik oldalon álló osztály ismeri 
            az osztályt amire a nyíl mutat. Ha nincs nyíl a vonalon az kétirányú kapcsolatot jelent.
        </para>
        <para>
            Aggregáció:
        </para>
        <para>
            Az asszociáció egy fajtája. Ilyenkor az egyik osztály "van-egy" kapcsolatban áll egy másikkal. pl: a diáknak van egy tanórája, ilyenkor a 
            kettő függ egymástól de az óra megszűnésével a diák nem szűnik meg.
        </para>
        <para>
            Kompozíció:
        </para>
         <para>
            Az asszociáció egy erősebb fajtája. Itt az összekötött két osztály szoros kapcsolatban van egymással. Ha a főosztályt eltöröljük, akkor a vele
            kapcsolatban lévő osztály is törlődik.
        </para>
    
       
        
    </section>        

    <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
          Itt az előző feladat ellentettjét csináljuk: most UML osztálydiagramból kell program kódot generálni. Én példának egy 
          Jármű osztályt csináltam mint ősosztály és egy Auto és Bicikli gyermek osztályt. A folyamathoz Visual Paradigmot használtam és 
          a következő csoda jött létre:
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Forward.png" scale="130"   />
                </imageobject>
        </mediaobject>
        <para>
            Az UML-t át is alakítjuk Java kóddá az "Instant Generator" funkcióval.
        </para>
        <programlisting language="Java">
        <![CDATA[
public class Jármű {
	protected String _kormány;
	protected int _ülés;
	protected int _kerekek_száma;
	public boolean _mukodik;
}
        ]]>
         </programlisting>
        <programlisting language="Java">
        <![CDATA[
public class Autó extends Jármű {
	private int _fogyasztás;

	public void motorIndit() {
        //TODO -implement motorIndit
		throw new UnsupportedOperationException();
	}
}
        ]]>
         </programlisting>
           
         <para>
           Mint látni lehet amit megadtunk neki adatok alapján megfelelően legenerálja a változókat és metódusokat.
           A gyermek osztályokat szépen külön fájlba rakja extend kulcsszóval. Viszont magát a kód részét egyértelmű nem tudja megtippelni,
           azt még mindig nekünk kell megírni. Cserébe egy kommentben emlékeztet, hogy ne felejtsük el az implementációt.
        </para>

        
    </section>        
        
    <section>
        <title>Egy esettan</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Az esettanos program egy informatikai boltban kapható eszközökről tárol és jelenít meg különböző adatokat.
            A különböző termékek adatait a consolera és egy fájlba is kiírjuk.A programot úgy tervezzük, hogy a jövőbeli termékcsaládokat is támogassa. 
            Ezért minél több mindent az ős osztályban deklarálunk, amit aztán új gyermek osztályok máshogy implementálhatnak.
        </para>
         <para>
           Ez az ősosztály a Product, ahol adattagként a beszerzési árat, beszerzési dátumot és a termék nevét adtuk meg. Ezek protected tagok, szóval megadunk 
           hozzájuk függvényeket amivel más osztályok is elérik értéküket, plusz egy rakás virtual függvények amit csak a gyerekekben implementálunk.       
        </para>
         <programlisting language="C++">
        <![CDATA[
class Product {
protected:
    int initialPrice;
    time_t dateOfAcquisition;
    std::string name;
    virtual void printParams(std::ostream& os) const;
    virtual void loadParamsFromStream(std::istream& is);
    virtual void writeParamsToStream(std::ostream& os) const;

public:
    Product();
    Product(std::string name, int initialPrice, time_t dateOfAcquisition);
    virtual ~Product() {};
    int getInitialPrice() const;
    std::string getName() const;
    time_t getDateOfAcquisition() const;
    int getAge() const;
    virtual int getCurrentPrice() const;
    void print(std::ostream& os) const;
    virtual std::string getType() const = 0;
    virtual char getCharCode() const = 0;
    friend std::istream& operator>>(std::istream& is, Product& product);
    friend std::ostream& operator<<(std::ostream& os, Product& product);
};
        ]]>
         </programlisting>
        <para>
          
            A eszközök jelölése: létrehozunk egy Product osztályt, amibe összegyűjtjük a termékek közös 
            tulajdonságait, aztán minden terméket ebből származtatunk le.
             Minden osztály asszociációval kapcsolódik a Product osztályhoz. 
            A product osztályban három tagváltozó van ezek protected láthatósági szinttel rendelkeznek. 
            Ezek a következők beszerzési dátum, beszerzési ár, név. Ezek más környezetben("külvilág") számára csak olvashatók. 
            Ezt a get metódusok segítségével érjük el. Emellett vannak metódusaink a termék árának kiszámítására és a 
            termék korának megállapítására.
            Viszont az ár kiszámítása termékfüggő, ezért ezt csak virtualként definiáljuk, amelyet a leszármaztatott 
            osztályok majd felülírnak.             
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Esettan.png" scale="190"  />
                </imageobject>
                <caption>
                <para>Esettan program futása</para>
                </caption>
        </mediaobject>
        
        
    </section>
    
    <section>
        <title>BPMN</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Business Process Model and Notation (BPMN) egy olyan modell amelyben, grafikusan reprezentálhatunk az üzleti folyamatokat.
            A fő célja az, hogy az egy projekten dolgozó de különböző feladatokat ellátó emberek (programozó, manager, elemző) egy közös tervet alkothassanak,
            amit mindenki megért.
        </para>
        <para>
            Jelölések:
        </para>
        <itemizedlist mark='bullet'>
        <listitem>
            <para>
                Esemény (Event)
            </para>
            <para>
               Jele a karika. A sima körvonalú a kezdő eseményt, a dupla körvonalú a
                közbenső eseményeket és a vastag körvonalú a befejezést jelöli.
            </para>
        </listitem>
        <listitem>
            <para>
                Tevékenység (Activity)
            </para>
            <para>
                Jele a lekerekített sarkú téglalap. Ezekben írjuk le a tevékenységeket, amit a modellezett entitás végez.
            </para>
        </listitem>
        <listitem>
            <para>
                Átjáró (Gateway)
            </para>
            <para>
                Jele a rombusz. Többkimenetelű kérdést írunk bele, a kivezető vonalakra pedig lehetséges válaszokat.
            </para>
        </listitem>
        </itemizedlist>
        
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BPMN.png"   />
                </imageobject>
        </mediaobject>
        <para>
            Példának egy átlagos éttermi látogatást modelleztem. Itt a Start event ugye ha, megéhezünk, ezután elmegyünk az étterembe és szeretnénk helyet foglalni.
            Viszont ha nem volt foglalásunk lehet, hogy várni kell amíg felszabadul egy hely. Ezután ugyanaz a folyamat történik mintha foglaltunk volna helyet.
            Amint helyet foglaltunk a pincér felveszi a rendelést, kihozza az ételt, mi pedig elfogyasztjuk, a folyamat szempontjából nem túl izgalmas.
            Viszont a végén attól függően, hogy milyen volt a kiszolgálás borravalóval vagy anélkül fejezzük be a folyamatot.
        </para>
        
    </section>
                                            

</chapter>                


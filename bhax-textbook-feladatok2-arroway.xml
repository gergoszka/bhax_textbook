<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
            Megoldás forrása:                
        </para>
       
        <para>
            A polárgenerátor C++ os változata 3 fájlból áll össze: polargen.h.polargen.cpp és polargenteszt.cpp.
            
            A polatgen headerjében deklaráljuk a destruktort és a konstruktort, amely példányosításkor igazra állítja a nincsTarolt változónkat és a randomizáló függvényünket igazán véletlenszerűvé tesszük a rendszeridővel.
            Majd prototype-oljuk a kovetkezo() függvényt és deklaráljuk a privát nincsTarolt és tarolt változókat.
        </para>
        <para>
            A polargen.cpp a fő részünk, itt írjuk meg az előző kovetkezo() függvény kódját.

            A kovetkezo() tagfüggvényben először megnézzük, hogy van-e eltárolva számunk, ha nincs akkor kiszá-
            mítunk kettőt: egyiket visszaadjuk a usernek, a másikat elrakjuk a tárolt változóba és a nincstárolt értékét
            hamisra állítjuk; ha van eltárolt számunk akkor azt visszaadjuk és a nincsTárolt változót igazra állítjuk.
        </para>
        <para>
            A polarteszt.cpp-ben példányosítjuk a polatgen osztályt pg néven és forral csinálunk 10 példát a kimenetre. A java megfelelője nagyon hasonló a programnak, bár ott egy fájlon belül tartjuk a forráskódot.         
        </para>
         <programlisting language="c++">
        <![CDATA[
        double PolarGen::kovetkezo ()
        {
           if (nincsTarolt){
             double u1, u2, v1, v2, w;
             do {
	       u1 = std::rand () / (RAND_MAX + 1.0);
	       u2 = std::rand () / (RAND_MAX + 1.0);
	       v1 = 2 * u1 - 1;
	       v2 = 2 * u2 - 1;
	      
               w = v1 * v1 + v2 * v2;
             } while (w > 1);

           double r = std::sqrt ((-2 * std::log (w)) / w);
           tarolt = r * v2;
           nincsTarolt = !nincsTarolt;

           return r * v1;
          } else{
            nincsTarolt = !nincsTarolt;
            return tarolt;
          }
        }
        
        ]]>
        </programlisting>  
        <para>
           Ez nagyban megegyezik ahhoz ahogy a JDK Random.javabán a Sun programozói csinálták:
        </para>
         <programlisting language="c++">
        <![CDATA[
      
      public double nextGaussian() {
        if (haveNextNextGaussian) {
          haveNextNextGaussian = false;
          return nextNextGaussian;
        } else {
          double v1, v2, s;
          do {
            v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
            v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
            s = v1 * v1 + v2 * v2;
          } while (s >= 1 || s == 0);
          double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
          nextNextGaussian = v2 * multiplier;
          haveNextNextGaussian = true;
          return v1 * multiplier;
        ]]>
        </programlisting>  
        <para>
            C++ és Java verzió is lefut:
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/polargen.png" scale="190" />
                </imageobject>
            </mediaobject>
    </section>        

    <section>
        <title>Homokózó</title>
        <para>
            Megoldás forrása:                
        </para>
        
    </section>        
        
    <section>
        <title>„Gagyi”</title>
        <para>
            Megoldás forrása:                
        </para>
        
        <para>
            A Gagyi.java programban lévő while ciklus csak akkor lesz igaz ha a két változó értéke megegyezik de 
            maguk az objektumok más helyen vannak a memóriában. Ennek tesztelésére három példa kódcsipetet csinálunk az Integer típus felhasználásával.
        </para>
        <para>
            Amikor egy Integer típusú változónak értéket adunk -128 és 127 között azt a Java egy kész poolból veszi ki és nem csinál új objekteket.
            Így, mint az első példából is látható, ha ezek között veszünk fel értéket az nem aktiválja a végtelen ciklust.
        </para>
        <programlisting language="c++">
        <![CDATA[
        Integer x = 110;
        Integer t = 110;

        while (x <= t && x >= t && t != x);
            //false
        ]]>
        </programlisting>  
        <para>
            Viszont egy olyan esetben, ha a poolon kívülről szeretnénk értéket adni két új objektum jön létre, amelyeknek
            bár ugyanaz az értékük más memóriacímen vannak eltárolva, így a végtelen ciklus lefut.
        </para>
        <programlisting language="c++">
        <![CDATA[
        Integer x = 130;
        Integer t = 130;

        while (x <= t && x >= t && t != x);
            //true
        ]]>
        </programlisting> 
        <para>
            Ez a folyamat bizonyítható a JDK Integer forrásából, amiben látható hogy ha az értékünk a poolon kívül van (nem Cache.low és Cache.high között)
            akkor a return new Integer(i); fog lefutni amikor csináljuk a két Integert.
        </para>
        <programlisting language="c++">
        <![CDATA[
        public static Integer valueOf(int i) {
            if (i >= IntegerCache.low && i <= IntegerCache.high)
                return IntegerCache.cache[i + (-IntegerCache.low)];
            
            return new Integer(i);
        }
        ]]>
        </programlisting> 
        <para>
            A harmadik példában pedig megkerüljük az egész poolozós témát és egyből használjuk az előző kódcsipet végén lévő
            new Integer() konstruktort.
        </para>
        <programlisting language="c++">
        <![CDATA[
        Integer x = new Integer(110);
        Integer t = new Integer(110);

        while (x <= t && x >= t && t != x);
            //true
        ]]>
        </programlisting> 
    </section>
    
    <section>
        <title>Yoda</title>
        <para>
            Megoldás forrása:                
        </para>
        
        <para>
           A Yoda féle feltétel írás a Star Wars kis zöld jedi mesteréről kapta nevét, aki sok más mellet fura szintaxisú beszédével tűnik ki, amiben 
           az alanyok és állítmányok helye felcserélődik. Ezt teszi esetünkben most is, ugyanis ha Yoda condition-ban írunk, akkor az összehasonlításokban
           a két szereplő tagok megcseréljük. Ennek előnye, hogy nem változó lesz elől, aminek null is lehet az értéke és így NullPointerExceptions-t is dobhat.
            Ez akkor következik be, ha egy metódust null értékkel hívunk meg.
            Hátránya viszont, hogy a kód nehezebben olvasható, hiszen a megszokott balról jobbra olvasást megbontja.
        </para>
         <programlisting language="c++">
        <![CDATA[
        String yoda = null ;
        if(yoda.equals("Erő"))
            System.out.println("Működni én nem fogok");
            
        if("Erő".equals(yoda))
            System.out.println("Működni én fogok");
        ]]>
        </programlisting> 
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/yoda.png" scale="280" />
                </imageobject>
            </mediaobject>
    </section>
    
    <section>
        <title>Kódolás from scratch</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A BBP algoritmus Segítségével kiszámolhatjuk a pi-nek
a d+1-dik jegyének a hexadecimális értéket úgy, hogy 
a megelőző jegyek nem kell kiszámolni. Kezdetben
létrehozunk egy osztályt a PiBBP algoritmusnak. 
A BBP algoritmus alapján:
{16^d Pi} = {4*{16^d S1} - 2*{16^d S4} - {16^d S5} - {16^d S6}}


A PiBBP public osztály argumentumaként bekérünk egy d számot, ami
d+ helyi értéket adja meg. Inicializáljuk a  számoláshoz szükséges változókat.
A d16pi-nek a 0.0d kezdő értéket adunk, az S1,S4,S5,S6 számoknak pedig a d16Sj 
függvénnyel számoljuk ki az értékét. 
d16Pi-t kiszámoljuk a BBP algoritmusa szerint és kivonjuk a lefelé kerekített
értékét. Példányosítjuk a StringBuffert sb néven, ami egy üres stringet hoz létre
és ezt bővítjük számonként. A hexaJegyek tömbben tároljuk 16-os számrendszer
betű tagjait, mivel 10 fölött A-F számok is becsatlakoznak.
Aztán indítunk egy while ciklust, ami addig megy amíg a d16pi
értéke nullával egyenlő nem lesz. Majd a d16Pi-t lefelé kerekítjük és bele kényszerítjük
egy int jegy változóba. 
Ha a szám 10-nél kisebb szimplán konkatenáljuk az sb-hez, viszont 
ha 10-nél nagyobb, akkor kivonunk belőle 10, így megkapjuk a hexaJegyek tömbből a neki megfelelő betűt.
Például ha 16-ot kapunk eredményül, akkor abból 10-et kivonva
 a tömb 6. indexű elemét kapjuk meg,a mi F.
Az osztály végén pedig toString-el stringgé konvertáljuk és betöltjük a 
d16PiHexaJegyek változóba.
        </para>
        <programlisting language="c++">
        <![CDATA[
        double d16Pi = 0.0d;
        
        double d16S1t = d16Sj(d, 1);
        double d16S4t = d16Sj(d, 4);
        double d16S5t = d16Sj(d, 5);
        double d16S6t = d16Sj(d, 6);
        
        d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
        
        d16Pi = d16Pi - StrictMath.floor(d16Pi);
        
        StringBuffer sb = new StringBuffer();
        
        Character hexaJegyek[] = {'A', 'B', 'C', 'D', 'E', 'F'};
        
        while(d16Pi != 0.0d) {
            
            int jegy = (int)StrictMath.floor(16.0d*d16Pi);
            
            if(jegy<10)
                sb.append(jegy);
            else
                sb.append(hexaJegyek[jegy-10]);
            
            d16Pi = (16.0d*d16Pi) - StrictMath.floor(16.0d*d16Pi);
        }
        
        d16PiHexaJegyek = sb.toString();
        ]]>
        </programlisting>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/scratch.png" scale="250" />
                </imageobject>
        </mediaobject>        
    </section>                                             

</chapter>                


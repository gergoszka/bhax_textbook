<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>FUTURE tevékenység editor</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A tevékenység szerkesztő program a FUTURE projek keretein belül lévő játékosok különböző tevékenységeit és hozzájuk társított
            értékeitket lehet megtekinteni és szerkeszteni. Jelenleg viszont bugos, ezért feladatunk megtalálni és javítani azt.
            Először is viszont, hogy futtatni tudjuk telepítenünk kell néhány dolgot. Szükségünk lesz az Intellij Idea IDE-re, egy java skd-ra és
            a javafx egy változatára, ami a faszerkezet függvényeit és szebb UI elemeket biztosít. Miután minden fent van beimportáljuk a projektet
            és hozzá társítjuk a javafx könyvtárakat. 
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/javafx.png" scale="125"  />
                </imageobject>
        </mediaobject>
        <para>
           Még mielőtt viszont futtathatnánk meg kell adni néhány futási opciót a javafx-nek és a programhoz használt fájlok 
           helyét. Ezt a Run menü  <emphasis>Edit configurations </emphasis>opciójában tehetjük meg:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/config.png" scale="125"  />
                </imageobject>
        </mediaobject>
        <para>
          Ezek után rá is térhetünk a bug megjavítására. Ha elindítjuk a programot lehetőségünk van a faszerkezetet böngészni, a fájlok 
          tartalmát szerkeszteni az alsó ablakban és a fájlokat átnevezni. Viszont amikor fájlt nevezel át, egy újraindítás után kiderül, hogy
          nem feltétlen átnevezés történt, hanem létrejött egy új fájl a szerkesztett névvel:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/bug.png" scale="160"  />
                </imageobject>
        </mediaobject>
        <para>
          Ezt kijavítani viszont nagyon egyszerű. A program editCell() metódusában végezzük a fájlok átnevezését. A probléma
          abból adódik, hogy amikor átnevezni kéni mi az mkdir és createNewFile függvényeket hívjuk meg így új fájlokat létrehozva.
          Ezekez csak le kell cseréni a renameTo eljárásra és már működik is:
        </para>
        <programlisting language="Java">
        <![CDATA[try {
            if (oldf.isDirectory()) {
                oldf.renameTo(newf);
            } else {
                oldf.renameTo(newf);
            }
        } catch (Exception e) {

        System.err.println(e.getMessage());

        }
        ]]>
         </programlisting>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/fixed.png" scale="160"  />
                </imageobject>
        </mediaobject>
    </section>        

    <section>
        <title>SamuCam</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
          A SamuCam beüzemeléséhez először is szükségünk lesz az opencv képfeldolhozó eszközre, Qt Creatorra és eszköztől függően
          egy kamera szoftverére. Az opencv-t lehet parancsorról telepíteni, a qt futtatható teleítóje pedig a hivatalos oldalról letölthető.
          Én laptopot használok a futtatáshoz, ezért a <emphasis>motion</emphasis> nevű szoftvert telepítettem, amivel localhostként streamelhetem 
          a laptopom webkameráját. Alapjáraton a program másodpercenként csinál egy képet a kamerán keresztül, ezt az opciót érdemes
          viszont még az indítása előtt a <emphasis role="strong"> /etc/motion/motion.conf </emphasis> található config fájlban kikapcsolni.
          Most, hogy működik a kamera, a Samut tartalmazó mappából ki is adhatjuk a <emphasis role="strong">~/Qt/5."VERSION"/gcc_64/bin/qmake SamuLife.pro</emphasis>
          parancsot, ami a qt mappákából meghívja a szükséges headereket. Ezután egy <emphasis role="strong">make</emphasis> és 
          <emphasis role="strong">./SamuCam --ip http://127.0.0.1:8081/ 2>out</emphasis> parancs kell még, ez megadja a kamaránk ip címét
          (ez eszközönként változhat) a programnak és egy out fájlba irányítja a kimenetet.
        </para>

        <para>
            Minket a programból a kamerát kezelő kód érdekel, így elöször nézzük a SamuCam.h fájlt. 
        </para>
        
        <programlisting language="Java">
        <![CDATA[
public:
    SamuCam ( std::string videoStream, int width, int height );
    ~SamuCam();

    void openVideoStream();
    void run();

private:
    std::string videoStream;
    cv::VideoCapture videoCapture;
    int width;
    int height;
    int fps;
        ]]>
         </programlisting>
         <para>
            A public részben láthatjuk a konstruktor tervrajzát, egy stringet fog kérni(a kamera ip címe)
            és a kép magasságát és szélességét is meg kell adnunk. Ezen felül deklaráljuk a program indításáért
            felelős void metódusokat. A privát részben érdekes a VideoCapture, ami egy opencv-ből van meghívva és
            feladata a kamera inicializálása. E mellett látjuk, hogy használjuk majd a megkapott kép magasságát,
            szélességét és a kamera által biztosított frame rate-et. 
        </para>
        <programlisting language="Java">
        <![CDATA[
SamuCam::SamuCam ( std::string videoStream, int width = 176, int height = 144 )
  : videoStream ( videoStream ), width ( width ), height ( height )
{
  openVideoStream();
}
        ]]>
         </programlisting>
        <para>
            Ez már érdekesebb , a cpp fájlban a konstruktor mostmár konkrét adatokkal szerepel és 
            a testéban meg is hív egy openVideoStream() függvényt. Ez mindt neve is sugallja, megnyitja a vido streamjét,
            és beállítja a kamera szélesség, magasság és fps értékeit. Majd jön a run függvény, amiben maga a beérkező kép
            feldolgozása történik. Elöször is létrehozunk egy CascadeClassifier-t, amihez githubról lekérünk egy emberi arcok
            adatait tartozó xml fájlt, a csacade pedig összeveti vele a beérkező képeket és megpróbálja eldönteni, hogy egyeznek e.
        </para>
            <programlisting language="Java">
        <![CDATA[void SamuCam::openVideoStream()
{
  videoCapture.open ( videoStream );

  videoCapture.set ( CV_CAP_PROP_FRAME_WIDTH, width );
  videoCapture.set ( CV_CAP_PROP_FRAME_HEIGHT, height );
  videoCapture.set ( CV_CAP_PROP_FPS, 10 );
}

void SamuCam::run()
{

  cv::CascadeClassifier faceClassifier;

  std::string faceXML = "lbpcascade_frontalface.xml"; // https://github.com/Itseez/opencv/tree/master/data/lbpcascades

        ]]>
         </programlisting>
         <para>
            Aztán beteöltjük a kamera feed-jét és várunk 50ms-et, majd ha a kép nem üres feldolgozzuk.
            Itt a képet újraméretezzük, hogy elkerüljük a nagy fájlokkal való munkát.
            Ezt átalakítjuk egy szürkeárnyalatú képpé, ami a gyakorlatban majd a reality-t fogja ábrázolni. Az emit
            érzékeli , hogy két kép között változott e valami, majd matematikai csodákkal kiszámítjuk a Samu által látott képet.
            A ciklus végén újra várunk 80ms-et és kezdjük előről egészen addig amíg van kép bemenet. 

        </para>
     
            <programlisting language="Java">
        <![CDATA[while ( videoCapture.isOpened() )
    {

      QThread::msleep ( 50 );
      while ( videoCapture.read ( frame ) )
        {

          if ( !frame.empty() )
            {

              cv::resize ( frame, frame, cv::Size ( 176, 144 ), 0, 0, cv::INTER_CUBIC );

              std::vector<cv::Rect> faces;
              cv::Mat grayFrame;

              cv::cvtColor ( frame, grayFrame, cv::COLOR_BGR2GRAY );
              cv::equalizeHist ( grayFrame, grayFrame );

              faceClassifier.detectMultiScale ( grayFrame, faces, 1.1, 4, 0, cv::Size ( 60, 60 ) );

              if ( faces.size() > 0 )
                {

                  cv::Mat onlyFace = frame ( faces[0] ).clone();

                  QImage* face = new QImage ( onlyFace.data,
                                              onlyFace.cols,
                                              onlyFace.rows,
                                              onlyFace.step,
                                              QImage::Format_RGB888 );

                  cv::Point x ( faces[0].x-1, faces[0].y-1 );
                  cv::Point y ( faces[0].x + faces[0].width+2, faces[0].y + faces[0].height+2 );
                  cv::rectangle ( frame, x, y, cv::Scalar ( 240, 230, 200 ) );


                  emit  faceChanged ( face );
                }

              QImage*  webcam = new QImage ( frame.data,
                                             frame.cols,
                                             frame.rows,
                                             frame.step,
                                             QImage::Format_RGB888 );

              emit  webcamChanged ( webcam );

            }

          QThread::msleep ( 80 );

        }
        ]]>
         </programlisting>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Samu.png" scale="120"  />
                </imageobject>
        </mediaobject>
       
        
    </section>        
        
    <section>
        <title>BrainB</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A BrainB benchmark program lényege a felhasználó koncentrációs képességének mérése. A teszt lényege, hogy az egér kurzort folyamatosan a 'Samu entropy' nevű nényzet közepén, a kék körben kell tartani.
            Samu és a többi objektum is random mozognak, a feladatot nehezíti, hogy minél tovább tartjuk rajta az egeret annál több új entropyt spawnolunk és gyorsaságuk is nő.Viszont ha elveszjük Samut csökken az entropyk száma és sebessége. A teszt 10 percig tart, amit kicsit soknak érzek mert elfárad az ember szeme és a keze is a folyamatos egérgomb lenyomástól a végére.
            Ha teljesítettük a tesztet a program egy külön fájlba elmenti eredményünket, amit a lost2found és found2lost változókból így számolunk:
        </para>   
         <programlisting language="c++"><![CDATA[
            
    int m1 = mean ( lost2found );
    int m2 = mean ( found2lost );
    double res = ( ( ( (double)m1+(double)m2 ) /2.0 ) /8.0 ) /1024.0;
    textStream << “U R about “ << res << “ Kilobytes\n";

            ]]>
        </programlisting>   
        <para>
            A BrainBThred konstruktorában deklaráljuk a hős osztályt,és állítjuk be a mozgásukat, amit random számolunk.  Ezen felül itt írjuk meg az adatok méréséhez szügséges get_bps,get_w,lost, stb. függvényeket.
            A BrainWin-ben írjuk meg az eventeket amik érzékelik hogy az egér gombja le van-e nyomva vagy sem és ez alapján indítja vagy állítja meg a játékot.Ha Samun van ez egér új entropykat hozunk létre és növeljük az agilitijét, ha elvesztjük entropykat törlünk és lassítjuk.Ezen felül impementáljuk hogy a P gomb lenyomásával meglehessen állítani a játékot.
            
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Brain.png" scale="35" />
                </imageobject>
        </mediaobject>
        <para>
            A signalok kapcsolása a connect-el történik a slotokhoz. A slotokat akkor kell meghívni ha egy signal
            bekövetkezik. Ezzel elkerülhetjük, hogy ne kelljen egy másik osztály függvényét meghívni. A connecteket
            a win.cpp-ben találjuk. A signalok és a slotok felépítésének megkell egyezni:
        </para>
           
        <programlisting language="c++"><![CDATA[
            
            connect ( brainBThread, SIGNAL ( heroesChanged ( QImage, int, ←-
        int ) ),
        this, SLOT ( updateHeroes ( QImage, int, int ) ) );
        connect ( brainBThread, SIGNAL ( endAndStats ( int ) ),
        this, SLOT ( endAndStats ( int ) ) );

            ]]>
        </programlisting>   
        
         
        
    </section>
    

</chapter>                

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló Chomsky!!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Encoding</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           A MandelbrotHalmazNagyító.java szinte teljesen megegyezik a Prog1-en kivesézett nagyító programmal. Azzal az egy
           különbséggel fogunk most foglalakozni, hogy az osztálynevekben és metódusokban megjelentek az ékezetes betűk.
           A Java már támogatja az ékezetes betűket, ehhez fordításkor az -encoding kapcsoló után kell megadni a kívánt 
           karakter kódolási formát, jelen esetünkben az ISO-8859-2 karakterkészletet.
        </para>
         <programlisting language="java"><![CDATA[
            javac -encoding ISO-8859-2 MandelbrotHalmazNagyító.java]]>
          </programlisting>
        <para>
            Az én esetemben viszont e nélkül is lefutott a program, mivel alapból a karakterkészlet 
            beállítás valamiért már az UTF-8 volt:  
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Encoding.png" scale="150"  />
                </imageobject>
        </mediaobject>
        <para>
            Viszont ha egy olyan karakterkészlettel futtatjuk, amiben nincs benne a magyar ábc a következő hibaüzenetet kapjuk: 
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Encoding_error.png" scale="150"  />
                </imageobject>
        </mediaobject>
        
    </section>        

    <section>
        <title>Full screen</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A feladat megoldásának időpontjában éppen aktívan dolgoztam egy JavaFx projekten ezért egyértelműnek tűnt nekem, hogy 
            ebben oldjam meg a feladatot. A JavaFx-ben Java Gui applikációkat hozhatunk létre sokkal szebb és letisztultabb kinézettel
            mint azt Swiftben tehetnénk. Az alap koncepció szerint a program szét van osztva egy xml részre, ami a projekt kinézetéért felelős
            és maga a programkódra, ami szorosan kapcsolódik az xml-hez.              
        </para>
        <para>
            Ez a környezet már nagy bonyolultságú projektekhez van kitalálva, így egy ablak teljes képernyős módba rakása elég triviális
            és egyetlen sor kódba telik:
        </para>
        <programlisting language="Java">
        <![CDATA[primaryStage.setFullScreen(true);]]>
         </programlisting>
          <para>
            A primaryStage jelen esetünkben a fő és egyetlen ablakunkat jelenti, aminek a setFullScreen attribútumát 
            igazra állítva meg is vagyunk. Viszont ez így magában elég unalmas, így a saját projektem vizuálisabb részét átraktam ide.
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/fullsrceen.png" scale="150"  />
                </imageobject>
        </mediaobject>
        <para>
            Röviden a programban a játékos
            lottó szelvényeket vehet és az eddigi játékainak a statisztikáit egy külön ablakban diagramokon nézheti meg.
            Ezek az oszlopdiagramok esetünkben a SZIMULÁLÁS gomb megnyomására random adatokat kapnak és jelenítik meg nekünk.
        </para>
        <programlisting language="Java">
        <![CDATA[
        //Main.Java

        public void start(Stage primaryStage) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("../Resources/Statistics.fxml"));
        primaryStage.setTitle("Fullscreen!");
        primaryStage.setScene(new Scene(root, 300, 275));
        primaryStage.setFullScreen(true);
        primaryStage.show(); 
        }

        ]]>
         </programlisting>
        <programlisting language="Java">
        <![CDATA[
        //Statistics.fxml

        public void DrawBar()
        {
        yAxis1.setLabel("Szelvények száma");

        series1.setName("Eddigi szelvények");
        series1.getData().add(new XYChart.Data<>("Összes ", bought_tickets));
        series1.getData().add(new XYChart.Data<>("Nyerő ", winner_tickets));
        series1.getData().add(new XYChart.Data<>("Vesztes ", loser_tickets));


        Node n = bc1.lookup(".data0.chart-bar");
        n.setStyle("-fx-bar-fill: blue");
        n = bc1.lookup(".data1.chart-bar");
        n.setStyle("-fx-bar-fill: green");
        n = bc1.lookup(".data2.chart-bar");
        n.setStyle("-fx-bar-fill: red");

        .
        .
        .
        ]]>
         </programlisting>

        
 

    </section>        
        
    <section>
        <title>Paszigráfia Rapszódia OpenGL full screen vizualizáció</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Mint a project dokumentációjában is olvasható, a Paszigráfia Rapszódia egy olyan 
            mesterséges nyelv kialakítására törekvő kezdeményezés, mely lehetővé
            teszi a homunkulusz és a mesterséges homunkulusz közötti kommunikációt,
            ergó ez az esport kultúra nyelve.
        </para>
         <para>
            Ennek az egyik vizualizáló programja a para12.cpp, ami OpenGL segítségével egy 3D-s térben jeleníti meg a homunkuluszokat.
            Itt lehetőségünk van a WASD gombokkal mozgatni a kamerát, QE gombokkal le és fel mozogni, egérrel körbenézni és a nyilakkal 
            pedig a legközelebbi kockát forgatni. 
        </para>
        <para>
            A fordításhoz szügségünk van 6 png képre és kettőspontokkal elválsztott számokra, amelyek a kockák oldalain lévő négyzeteket adják meg.
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/para_console.png" scale="150"  />
                </imageobject>
        </mediaobject>
        <para>
            Narancs és piros színű bemeneti képekkel és a programban lévő színezési értékek átállításával pedig a következő képet kaptam:
        </para>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/para.png" scale="90"  />
                </imageobject>
        </mediaobject>
        
    </section>
    
    <section>
        <title>Perceptron osztály</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Jelen feladatban a neurális hálózatok legegyszerűbb változatát, a perceptront vesszük elő.
            A neurális hálók neuronokból állnak amelyek valamilyen függvény alapján vátoztatnak a megkapott értéken
            és továbbadják azt. Jelenleg egyetlen neuront
            ábrázolunk viszont több darabbal egy layeren vagy több leyeren már bonyolultabb hálózatoakt ábrázolhatunk
            ,de ez a neuronunk véges sok input alapján egy algoritmus segítségével két csoportba sorolja az adatot. Ehhez nem-
            csak a bemenő adatokat adjuk meg, hanem a megoldást is, így az algoritmus az adatokhoz rendelt súlyok
            változtatásával megpróbálja megközelíteni az elvárt megoldást.
        </para>      
        
                 <programlisting language="Java">
        <![CDATA[
//perceptron.cpp

    Perceptron* p = new Perceptron (3, size, 256, size);

        ]]>
         </programlisting>
          <para>
            A mainben a perceptron konstuktora 4 argumentumot vár: layerek száma, súlyok száma, rejtett layerek azáma
            és az várt kimenetek száma.
            Az eredeti konstruktorban 1 szerepelt a súlyok számaként, így akkor nem megfelelően színezett képet kaptunk, ezt
            ki kell cserélni size-ra ha megfelelő eredméynt akarunk.
            Mivel már nem egy számot akarunk kapni ezért a value-t átkell írnunk double* value-ra, hogy egy
            tömb legyen.
            Majd legvégül végig bekell járnunk a képet és módosítani a pixeleket és elmenteni egy fájlba.
         </para>

        
        <programlisting language="Java">
        <![CDATA[
    for (int i = 0; i<png_image.get_width(); ++i)
        for (int j = 0; j<png_image.get_height(); ++j)
        {
            png_image[i][j].green = value[i*png_image.get_width() + j];
            png_image[i][j].blue = value[i*png_image.get_height() + i];
        }
    
    png_image.write("kimenet.png");

        ]]>
         </programlisting>
                 <mediaobject>
                <imageobject>
                    <imagedata fileref="img/kimenet.png" scale="65"  />
                </imageobject>
        </mediaobject>
    </section>
                                            

</chapter>                


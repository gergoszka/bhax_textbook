<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustrup!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>MNIST</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Itt a feladatunk a tensorflow szám felismerő alguritmusát felélesztenünk és kipróbáénunk.
            Maga a tensorflow a google egy opensource machine learning projektje. A python programba először importálnunk
            kell a tensorflow-t, hogy használhassuk. A readimg beveszi a képet amit fel szeretnénk ismerni  és dekódolja nekünk.
            Ahhoz, hogy fel tudjon ismerni egy számot, ezt meg kell neki tanítani. Ehhez szükséges egy modellt létrehozni, amin gyakorol a program.
            Amint ez megvan lefuttatunk egy teszt képet ami megadja a tipp pontosságát.
            Ez a percetronhoz hasonlóan nodeokból és súlyokból álló neural network, de annál jóval bonyolultabb.

        </para>
         <programlisting language="Python">
        <![CDATA[print("-- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("----------------------------------------------------------")

  # Test trained model
  print("-- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("-- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
        ]]>
         </programlisting>
        <para>
           A pontosságot minél több hidden réteggel és noda-al tudjuk növelni.
Tehát az egész egy valószín ˝uségi értéket figyel ha megüti a meghatározott küszöböt ez az érték és a hiba
mértéke kevés akkor a program elfogadja mint megoldást. A programmal 28*28 pixeles képekrol döntjük 
el, hogy milyen szám szerepel a képen:
        </para>
        <programlisting language="Python">
        <![CDATA[print("-- A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  img = readimg()
  image = img.eval()
  image = image.reshape(28*28)
  matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})
        ]]>
         </programlisting>
         
        
    </section>        

    <section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
          A feladat a tensorflow telefonra készült különböző mesterséges inteligenciát használó programjait telepítsük és 
          teszteljük. A Classify és a Detict is képfelismerő algoritmusok azzal a különbséggel, hogy a Classify csak fent bizonyos
          esélyt ír a képen látható objektumokra a detect ki is jelöli nekünk azokat. Az egyértelműen kivehető tárgyaknál
          meglepően pontosak de nagyon sok mindenet persze még nem ismernek fel és a tv-t egy mikrótól is nehéz neki megkülönbözettni.
          A speech hangfelismerő program a felsorolt szavakat tudja felismerni. Itt a go és no szavakat gyakran felcseréli a többit viszont
          mindig megérti. Végül a Stylizer-el érdekes filtereket rakhatunk a képünkre.
        </para>
        <para>
          Classify és Detect felismerő:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/tensor1.png"/>
                </imageobject>
        </mediaobject>

        <para>
          Stylizeer és Speech hangfelismerő:
        </para>

        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/tensor1.png"/>
                </imageobject>
        </mediaobject>
        
        
       
        
    </section>        
        
    <section>
        <title>Minecraft MALMO-s példa</title>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A Minecraft Malo egy a Microsoft általt készített játszó ágens. Az ágens segítségével python vagy c++ kód
            segítségével programozhatjuk a minecraftos karakterünk, Steve cselekvéseit. Először is viszont fel kell telepítenünk azt. 
            Ehhez leszedjük a github repót a microsoft hivatalos oldaláról, majd telepítjük a következő szükséges függőségeket:
            <emphasis role="strong">sudo apt-get install libboost-all-dev libpython3.6 openjdk-8-jdk ffmpeg python-tk python-imaging-tk.</emphasis>
            
        </para>
        <para>
            Ezután még futathatás előtt ki kell adni a következő parancsokat is:
        </para> 
        <para>
            <emphasis role="strong">export JAVA_HOME=/usr/lib/jvm/java-8-openjdkamd64/</emphasis>
        </para>
        <para>
            <emphasis role="strong">MALMO_XSD_PATH=~/MalmoPlatform/Schemas</emphasis>
        </para>

        <para>
            Most, hogy megvagyunk el is indíthatjuk a <emphasis role="strong">./launchClient.sh</emphasis> paranccsal.
            Viszon ez még csak a minecratot és a szervert indítja el, ahhoz hogy küldetéseket futtassunk nyitnunk kell egy külön 
            terminált és ott elnavigálni a python-examples mappába. Itt különböző bemutató python küldetések vannak amikkel tökéletesen
            be lehet mutatni a porgram működését.
        </para>
        <para>
            A küldetések alapja a python kódba ágyazott xml-ek. Itt adhatjuk meg a világ random generált kódját, a játékmódot, a chaten
            megjelenő visszaszámlálót és sok mást tudunk beállítani.
        </para>
        <programlisting language="xml">
        <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
            <Mission xmlns="http://ProjectMalmo.microsoft.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            
              <About>
                <Summary>Hello world!</Summary>
              </About>
              
              <ServerSection>
                <ServerHandlers>
                  <FlatWorldGenerator generatorString="3;7,44*49,73,35:1,159:4,95:13,35:13,159:11,95:10,159:14,159:6,35:6,95:6;12;"/>
                  <ServerQuitFromTimeUp timeLimitMs="30000"/>
                  <ServerQuitWhenAnyAgentFinishes/>
                </ServerHandlers>
              </ServerSection>
              
              <AgentSection mode="Survival">
                <Name>MalmoTutorialBot</Name>
                <AgentStart/>
                <AgentHandlers>
                  <ObservationFromFullStats/>
                  <ContinuousMovementCommands turnSpeedDegs="180"/>
                </AgentHandlers>
              </AgentSection>
            </Mission>'''
        ]]>
         </programlisting>
        <para>
            Ebben a példa küldetésben Steve feladata a túlélés. Alapból egyenesen megy amíg akadályba nem ütközik, ekkor megpróbaálja kikerülni azt.
            Ha ez nem müködik képes átugrani, átütni és  a nagy akadájok esetén maga alá építve átjutni rajtuk.  Ez sokban hasonlít a Steve Szemüvege programhoz
            bár ez sokkal butább, hiszen nem érékeljük mi is van körülöttünk, csak random próbálgatja a kijutásra beprogramozott scripteket.
        </para>
         <programlisting language="xml">
        <![CDATA[# Attempt to start the mission:
max_retries = 3
for retry in range(max_retries):
    try:
        agent_host.startMission( my_mission, my_mission_record )
        break
    except RuntimeError as e:
        if retry == max_retries - 1:
            print("Error starting mission",e)
            print("Is the game running?")
            exit(1)
        else:
            time.sleep(2)

# Wait for the mission to start:
world_state = agent_host.getWorldState()
while not world_state.has_mission_begun:
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
        ]]>
         </programlisting>
         <mediaobject>
                <imageobject>
                    <imagedata fileref="img/malmo.png"  />
                </imageobject>
        </mediaobject>
    </section
</chapter>                
